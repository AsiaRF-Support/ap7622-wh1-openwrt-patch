diff --git a/feeds/morse/luci/luci-app-morseconfig/htdocs/luci-static/resources/tools/morse/uci.js b/feeds/morse/luci/luci-app-morseconfig/htdocs/luci-static/resources/tools/morse/uci.js
index de9777d..e00e91c 100644
--- a/feeds/morse/luci/luci-app-morseconfig/htdocs/luci-static/resources/tools/morse/uci.js
+++ b/feeds/morse/luci/luci-app-morseconfig/htdocs/luci-static/resources/tools/morse/uci.js
@@ -15,6 +15,12 @@ function getZoneForNetwork(network) {
 	return zoneSection?.['.name'];
 }
 
+function setAllForwardingRules(bool) {
+	for (const s of uci.sections('firewall', 'forwarding')) {
+		uci.set('firewall', s['.name'], 'enabled', bool ? '1' : '0');
+	}
+}
+
 function getOrCreateForwarding(srcZone, destZone, name = undefined) {
 	// The code subsequent to this messes with firewall rules. However, if the
 	// user hasn't changed what's in uci at all, we want to be able to issue
@@ -31,9 +37,13 @@ function getOrCreateForwarding(srcZone, destZone, name = undefined) {
 	// Ideally we would like to delete here, but for now to avoid destroying
 	// the default mmrouter/mmextender forwarding rules, we set enabled=0
 	// (unfortunately, the LuCI pages at the moment don't understand enabled).
+	/* Elwin Huang: AP7622 has lan port and wan port. We wanna do forwarding from both
+	   awhlan and lan to wan in the same time, so don't disable other forwarding rule
+	   here but call setAllForwardingRules before this function.
 	for (const s of uci.sections('firewall', 'forwarding').filter(f => f.src === srcZone)) {
 		uci.set('firewall', s['.name'], 'enabled', '0');
 	}
+	*/
 
 	let existingDisabledForwarding = uci.sections('firewall', 'forwarding').find(f => f.src === srcZone && f.dest === destZone);
 	if (existingDisabledForwarding) {
@@ -358,6 +368,7 @@ return baseclass.extend({
 	getNetworkDevices,
 	setNetworkDevices,
 	getNetworkWifiIfaces,
+	setAllForwardingRules,
 	getOrCreateForwarding,
 	setupNetworkWithDnsmasq,
 	ensureNetworkExists,
diff --git a/feeds/morse/luci/luci-app-morseconfig/htdocs/luci-static/resources/view/morse/meshwizard.js b/feeds/morse/luci/luci-app-morseconfig/htdocs/luci-static/resources/view/morse/meshwizard.js
index 3f1cff1..0a17a08 100644
--- a/feeds/morse/luci/luci-app-morseconfig/htdocs/luci-static/resources/view/morse/meshwizard.js
+++ b/feeds/morse/luci/luci-app-morseconfig/htdocs/luci-static/resources/view/morse/meshwizard.js
@@ -153,7 +153,7 @@ return wizard.AbstractWizardView.extend({
 
 		// i.e. lan = eth, ahwlan = halow
 		const nonBridgeMode = () => {
-			morseuci.setNetworkDevices('lan', this.getEthernetPorts().map(p => p.device));
+			morseuci.setNetworkDevices('lan', this.getEthernetPorts().filter(d => d.role === 'lan').map(p => p.device));
 			uci.set('wireless', morseInterfaceName, 'network', 'ahwlan');
 			uci.set('camera-onvif-server', 'interface', 'ahwlan');
 
@@ -182,9 +182,11 @@ return wizard.AbstractWizardView.extend({
 			if (uplink === 'ethernet' && device_mode_meshgate === 'router') {
 				const { ethIface, halowIface } = nonBridgeMode();
 
-				uci.set('network', ethIface, 'proto', 'dhcp');
+				uci.set('network', 'wan', 'device', 'wan');
 				morseuci.setupNetworkWithDnsmasq(halowIface, wlanIp);
-				morseuci.getOrCreateForwarding(halowIface, ethIface, 'mmrouter');
+				morseuci.setAllForwardingRules(false);
+				morseuci.getOrCreateForwarding(ethIface, 'wan', 'lan');
+				morseuci.getOrCreateForwarding(halowIface, 'wan', 'mmrouter');
 			} else if (uplink === 'none') {
 				const { ethIface, halowIface } = nonBridgeMode();
 
@@ -206,6 +208,7 @@ return wizard.AbstractWizardView.extend({
 				uci.set('network', 'wifi24lan', 'proto', 'dhcp');
 				uci.set('wireless', wifiStaInterfaceName, 'network', 'wifi24lan');
 				morseuci.setupNetworkWithDnsmasq(iface, wlanIp);
+				morseuci.setAllForwardingRules(false);
 				morseuci.getOrCreateForwarding(iface, 'wifi24lan', 'wifi24forward');
 
 				this.ethIp = wlanIp;
@@ -216,6 +219,7 @@ return wizard.AbstractWizardView.extend({
 
 				uci.set('network', halowIface, 'proto', 'dhcp');
 				morseuci.setupNetworkWithDnsmasq(ethIface, lanIp);
+				morseuci.setAllForwardingRules(false);
 				morseuci.getOrCreateForwarding(ethIface, halowIface, 'mmextender');
 
 				this.ethIp = lanIp;
diff --git a/feeds/morse/luci/luci-app-morseconfig/htdocs/luci-static/resources/view/morse/wizard.js b/feeds/morse/luci/luci-app-morseconfig/htdocs/luci-static/resources/view/morse/wizard.js
index 02204ed..9a84303 100644
--- a/feeds/morse/luci/luci-app-morseconfig/htdocs/luci-static/resources/view/morse/wizard.js
+++ b/feeds/morse/luci/luci-app-morseconfig/htdocs/luci-static/resources/view/morse/wizard.js
@@ -139,7 +139,7 @@ return wizard.AbstractWizardView.extend({
 		};
 
 		const nonBridgeMode = () => {
-			morseuci.setNetworkDevices('lan', this.getEthernetPorts().map(p => p.device));
+			morseuci.setNetworkDevices('lan', this.getEthernetPorts().filter(d => d.role === 'lan').map(p => p.device));
 			uci.set('wireless', morseInterfaceName, 'network', 'ahwlan');
 			uci.set('camera-onvif-server', 'interface', 'ahwlan');
 
@@ -162,8 +162,10 @@ return wizard.AbstractWizardView.extend({
 			if (uplink === 'ethernet' && device_mode_ap === 'router') {
 				const { ethIface, halowIface } = nonBridgeMode();
 
-				uci.set('network', ethIface, 'proto', 'dhcp');
+				uci.set('network', 'wan', 'device', 'wan');
 				morseuci.setupNetworkWithDnsmasq(halowIface, wlanIp);
+				morseuci.setAllForwardingRules(false);
+				morseuci.getOrCreateForwarding(ethIface, 'wan', 'lan');
 				morseuci.getOrCreateForwarding(halowIface, ethIface, 'mmrouter');
 			} else if (uplink === 'none') {
 				const { ethIface, halowIface } = nonBridgeMode();
@@ -188,6 +190,7 @@ return wizard.AbstractWizardView.extend({
 				uci.set('network', 'wifi24lan', 'proto', 'dhcp');
 				uci.set('wireless', wifiStaInterfaceName, 'network', 'wifi24lan');
 				morseuci.setupNetworkWithDnsmasq(iface, wlanIp);
+				morseuci.setAllForwardingRules(false);
 				morseuci.getOrCreateForwarding(iface, 'wifi24lan', 'wifi24forward');
 
 				this.ethIp = wlanIp;
@@ -199,6 +202,7 @@ return wizard.AbstractWizardView.extend({
 				uci.unset('wireless', morseInterfaceName, 'wds');
 				uci.set('network', halowIface, 'proto', 'dhcp');
 				morseuci.setupNetworkWithDnsmasq(ethIface, lanIp);
+				morseuci.setAllForwardingRules(false);
 				morseuci.getOrCreateForwarding(ethIface, halowIface, 'mmextender');
 
 				this.ethIp = lanIp;
